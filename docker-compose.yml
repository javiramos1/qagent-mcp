services:
  mcp-server:
    build: .
    ports:
      - "8001:8001"
    environment:
      # MCP Server Configuration
      - TAVILY_API_KEY=${TAVILY_API_KEY}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - MCP_HOST=0.0.0.0
      - MCP_PORT=8001
      # MCP Server Tool Configuration
      - MAX_RESULTS=${MAX_RESULTS:-10}
      - SEARCH_DEPTH=${SEARCH_DEPTH:-basic}
      - MAX_CONTENT_SIZE=${MAX_CONTENT_SIZE:-10000}
      - MAX_SCRAPE_LENGTH=${MAX_SCRAPE_LENGTH:-20000}
      - ENABLE_SEARCH_SUMMARIZATION=${ENABLE_SEARCH_SUMMARIZATION:-false}
    volumes:
      - ./sites_data.csv:/app/sites_data.csv:ro
    command: ["fastmcp", "run", "mcp_server.py", "--transport", "streamable-http", "--port", "8001", "--host", "0.0.0.0"]
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8001/mcp', timeout=10)"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 60s
    networks:
      - qagent-network

  qa-agent:
    build: .
    ports:
      - "8000:8000"
    environment:
      # FastAPI Client Configuration
      - GOOGLE_API_KEY=${GOOGLE_API_KEY}
      - MCP_SERVER_URL=http://mcp-server:8001/mcp
      # Client LLM Configuration
      - LLM_TEMPERATURE=${LLM_TEMPERATURE:-0.1}
      - LLM_MAX_TOKENS=${LLM_MAX_TOKENS:-3000}
      - LLM_TIMEOUT=${LLM_TIMEOUT:-60}
      - REQUEST_TIMEOUT=${REQUEST_TIMEOUT:-30}
    volumes:
      - ./sites_data.csv:/app/sites_data.csv:ro
    command: ["python", "-m", "uvicorn", "main:app", "--host", "0.0.0.0", "--port", "8000"]
    depends_on:
      mcp-server:
        condition: service_healthy
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "python", "-c", "import requests; requests.get('http://localhost:8000/health', timeout=10)"]
      interval: 30s
      timeout: 15s
      retries: 3
      start_period: 60s
    networks:
      - qagent-network

networks:
  qagent-network:
    driver: bridge

  # Optional: Add a simple web interface (uncomment if needed)
  # web-ui:
  #   image: nginx:alpine
  #   ports:
  #     - "80:80"
  #   volumes:
  #     - ./nginx.conf:/etc/nginx/nginx.conf:ro
  #   depends_on:
  #     - qa-agent
  #   restart: unless-stopped 